import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import Pagination from '../components/Pagination';
import Navigation from '../components/ui/Navigation';
import { FaHeart } from 'react-icons/fa';
import { VscChromeClose } from 'react-icons/vsc';
import { toast } from 'react-toastify';
import { useUserDispatch, IP_ADDRESS, instance } from '../context/UserContext';
import IMG_PROFILE from '../assets/img/img_profile.png';

// üÉè ÎÇ¥Í∞Ä Ï†ÄÏû•Ìïú Í≤åÏãúÎ¨º
const SavedRecipe = ({
  postId,
  title,
  description,
  imageUrl,
  onEdit,
  onDelete,
  showEditDeleteButtons = true,
}) => {
  const maxLength = 30; // Î≥∏Î¨∏Ïùò ÏµúÎåÄ Í∏∏Ïù¥ ÏÑ§Ï†ï
  const shortDescription =
    description.length > maxLength
      ? description.slice(0, maxLength) + '...'
      : description;

  return (
    <div className="text-black ml-6 mr-6 mt-2 w-full max-w-md relative">
      <div className="bg-white mx-2 my-2 p-4 rounded-xl shadow overflow-hidden relative flex flex-col md:flex-row">
        <Link to={`/board/${postId}`} className="flex-grow flex items-center">
          <div className="flex-none w-20 h-20 md:w-20 md:h-20 max-w-xs rounded-xl border-2 border-gray-300 overflow-hidden mr-4">
            <img
              className="w-full h-full object-cover"
              src={imageUrl}
              alt={title}
            />
          </div>
          <div className="md:pl-4 mt-4 md:mt-0">
            <h3 className="text-lg font-score font-semibold">{title}</h3>
            <p className="text-gray-500 pt-1 text-sm font-score md:max-w-xs">
              {shortDescription}
            </p>
          </div>
        </Link>
        {showEditDeleteButtons && (
          <div className="absolute top-4 right-2 flex flex-row space-x-1">
            <button
              onClick={() => onEdit(postId)}
              className="pr-3 text-sm text-gray-300"
            >
              ÏàòÏ†ï
            </button>
            <button
              onClick={() => onDelete(postId)}
              className=" text-gray-400 pr-2"
            >
              <VscChromeClose />
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// üÉè Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîº
const LikedRecipe = ({ postId, title, description, imageUrl }) => {
  const maxLength = 25; // Î≥∏Î¨∏Ïùò ÏµúÎåÄ Í∏∏Ïù¥ ÏÑ§Ï†ï
  const shortDescription =
    description.length > maxLength
      ? description.slice(0, maxLength) + '...'
      : description;

  return (
    <div className="text-black ml-6 mr-6 mt-2 w-full max-w-md">
      <div className="bg-white mx-2 my-2 p-4 rounded-xl shadow overflow-hidden relative flex flex-col">
        <Link
          to={`/board/${postId}`}
          className="flex flex-grow items-center justify-between"
        >
          <div className="flex items-center">
            <div className="flex-none w-20 h-20 max-w-xs rounded-xl border-2 border-gray-300 overflow-hidden mr-4">
              <img
                className="w-full h-full object-cover"
                src={imageUrl}
                alt={title}
              />
            </div>
            <div className=" mt-3">
              <h3 className="text-lg font-score font-semibold">{title}</h3>
              <p className="text-gray-500 pt-1 text-sm font-score md:max-w-xs">
                {shortDescription}
              </p>
            </div>
          </div>
          <div className="heart-icon-container">
            <FaHeart className="text-red-500 text-2xl heart-icon" />
          </div>
        </Link>
      </div>
    </div>
  );
};

// üìÇ ÎßàÏù¥ÌéòÏù¥ÏßÄ
export default function MyPage() {
  const [imageUrl, setImageUrl] = useState('' || IMG_PROFILE);
  const [currentPage, setCurrentPage] = useState(1);
  const [recipesPerPage] = useState(5);
  const [totalMyRecipes, setTotalMyRecipes] = useState(0);
  const [totalLikedRecipes, setTotalLikedRecipes] = useState(0);
  const [showMyRecipes, setShowMyRecipes] = useState(true);
  // ÌÜ†Í∏Ä Í∏∞Îä• - true :ÏûëÏÑ±Ìïú Î†àÏãúÌîº / false : Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîº

  const [recipes, setRecipes] = useState([]); // ÎÇ¥Í∞Ä Ï†ÄÏû•Ìïú Î†àÏãúÌîºÎì§
  const [likedItems, setLikedItems] = useState([]); // Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîºÎì§
  const [currentPageMyRecipes, setCurrentPageMyRecipes] = useState(1);
  const [currentPageLikedRecipes, setCurrentPageLikedRecipes] = useState(1);

  const { logout } = useUserDispatch();

  const accessToken = localStorage.getItem('accessToken');
  const nickName = localStorage.getItem('nickName');
  const email = localStorage.getItem('email');
  const navigate = useNavigate();

  // --------------------------------------------------------------------------------------------------------

  useEffect(() => {
    // üßëüèΩ‚Äçüåæ ÌòÑÏû¨ Î°úÍ∑∏Ïù∏ Ï§ëÏù∏ Ïú†Ï†Ä Ï†ïÎ≥¥ : ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ, ÎãâÎÑ§ÏûÑ
    const fetchUserInfo = async () => {
      const URL = `${IP_ADDRESS}/userinfo`;
      try {
        if (accessToken) {
          const response = await instance.get(URL, {
            headers: {
              'Authorization-Access': accessToken,
              email: email,
            },
          });
          setImageUrl(response.data.imageUrl);
          localStorage.setItem(response.data.imageUrl); // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
        } else {
          return;
        }
      } catch (error) {
        if (error.response.headers.code === 'RAT8') {
          console.log('Ïú†Ï†Ä Ï†ïÎ≥¥ Í∞±Ïã† Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§', 'RAT8');
        }
      }
    };

    // üìù ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú Î†àÏãúÌîº Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    const fetchMyPage = async () => {
      const URL = `${IP_ADDRESS}/mypost`;
      try {
        const response = await instance.get(URL, {
          headers: {
            'Authorization-Access': accessToken,
            email: email,
          },
        });
        if (response.data && Array.isArray(response.data.items)) {
          const items = response.data.items.map((item) => {
            return {
              postId: item.ID,
              title: item.title,
              description: item.description,
              imageUrl: item.imageUrl,
            };
          });
          setRecipes(items);
          // totalMyRecipes = Math.ceil(response.data.total / recipesPerPage);
          setTotalMyRecipes(response.data.total);
          console.log('ÎÇ¥Í∞ÄÏûëÏÑ±Ìïú Î†àÏãúÌîº Ï¥ù Í∞ØÏàò:', response.data.total);
        } else {
          toast.error('Îç∞Ïù¥ÌÑ∞Í∞Ä Î∞∞Ïó¥Ïù¥ ÏïÑÎãôÎãàÎã§');
        }
      } catch (error) {
        console.error('ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú Î†àÏãúÌîº Î°úÎìú Ï§ë ÏóêÎü¨ Î∞úÏÉù', error);
      }
    };

    // üìù ÏûëÏÑ±Ìïú Í≤åÏãúÎ¨º, Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Í≤åÏãúÎ¨º mock data
    // const fetchMockData = async () => {
    //   try {
    //     if (mockData.items && Array.isArray(mockData.items)) {
    //       const items = mockData.items.map((item) => ({
    //         postId: item.ID,
    //         title: item.title,
    //         description: item.description,
    //         imageUrl: item.imageUrl,
    //         likeCount: item.likeCount,
    //       }));
    //       setRecipes(items);
    //       setLikedItems(items);
    //     } else {
    //       console.error('Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ïò§Î•ò:', mockData.items);
    //     }
    //   } catch (error) {
    //     console.error('ÏóêÎü¨ ÎÇ¥Ïö©:', error);
    //   }
    // };

    // üî• Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Í≤åÏãúÎ¨ºÎì§ Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    const fetchLikeData = async () => {
      const URL = `${IP_ADDRESS}/likedpost`;
      try {
        const response = await instance.get(URL, {
          headers: {
            'Authorization-Access': accessToken,
            email: email,
          },
        });
        if (response.data && Array.isArray(response.data.items)) {
          const items = response.data.items.map((item) => ({
            id: item.ID,
            title: item.title,
            description: item.description,
            imageUrl: item.imageUrl,
            likeCount: item.likeCount,
          }));
          setLikedItems(items);
          // totalLikedRecipes= Math.ceil(response.data.total / recipesPerPage);
          setTotalLikedRecipes(response.data.total);
          console.log('Ï¢ãÏïÑÏöîÎàÑÎ•∏ Ï¥ù Î†àÏãúÌîº Í∞ØÏàò:', response.data.total);
        } else {
          toast.error('Îç∞Ïù¥ÌÑ∞Í∞Ä Î∞∞Ïó¥Ïù¥ ÏïÑÎãôÎãàÎã§!');
        }
      } catch (error) {
        console.error('Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Í∏∞Î°ù Î∞õÏïÑÏò§Îäî Ï§ë ÏóêÎü¨ Î∞úÏÉù', error);
      }
    };

    const fetchMyRecipesCount = async () => {
      try {
        const response = await instance.get(`${IP_ADDRESS}/mypost/size`, {
          headers: {
            'Authorization-Access': accessToken,
            email: email,
          },
        });
        setTotalMyRecipes(response.data.total);
      } catch (error) {
        console.error('ÎÇ¥ Î†àÏãúÌîº Ï¥ù Í∞úÏàò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
        toast.error('Î†àÏãúÌîº Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    };

    const fetchLikedRecipesCount = async () => {
      try {
        const response = await instance.get(`${IP_ADDRESS}/likedpost/size`, {
          headers: {
            'Authorization-Access': accessToken,
            email: email,
          },
        });
        setTotalLikedRecipes(response.data.total);
      } catch (error) {
        console.error('Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîº Ï¥ù Í∞úÏàò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
        toast.error('Ï¢ãÏïÑÏöî Î†àÏãúÌîº Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    };

    fetchUserInfo();
    if (showMyRecipes) {
      fetchMyPage();
      // fetchMockData();
    } else {
      // fetchMockData();
      fetchLikeData();
    }
    if (accessToken) {
      fetchMyRecipesCount();
      fetchLikedRecipesCount();
    }
  }, [showMyRecipes, accessToken, email]);

  // 1Ô∏è‚É£ Î†àÏãúÌîº ÏàòÏ†ï
  const handleEdit = (postId) => {
    navigate(`/editpost/${postId}`);
  };

  // 2Ô∏è‚É£ Î†àÏãúÌîº ÏÇ≠Ï†ú
  const deleteRecipe = async (postId) => {
    try {
      await instance.post(`${IP_ADDRESS}/mypost/delete`, postId, {
        headers: {
          'Authorization-Access': accessToken,
        },
      });
      setRecipes((prevRecipes) =>
        prevRecipes.filter((recipe) => recipe.postId !== postId)
      );
    } catch (error) {
      console.error('Î†àÏãúÌîº ÏÇ≠Ï†ú ÏóêÎü¨ ÎÇ¥Ïö©:', error);
      throw error;
    }
  };
  // 3Ô∏è‚É£ Î†àÏãúÌîº ÏÇ≠Ï†ú ÌôïÏù∏
  const handleDeleteConfirmation = async (postId) => {
    const confirmDelete = window.confirm('Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
    if (confirmDelete) {
      try {
        await deleteRecipe(postId);
        toast.success('Î†àÏãúÌîº ÏÇ≠Ï†ú ÏÑ±Í≥µ');
      } catch (error) {
        console.error('Î†àÏãúÌîº ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      }
    }
  };

  const toggleRecipeView = (view) => {
    setShowMyRecipes(view);
    setCurrentPage(1); // Î™©Î°ùÏùÑ Ï†ÑÌôòÌï† ÎïåÎßàÎã§ Ï≤´ ÌéòÏù¥ÏßÄÎ°ú ÏÑ§Ï†ï
  };

  // Active ÏÉÅÌÉúÏóê Îî∞Îùº ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Î≤àÌò∏ÏôÄ Î†àÏãúÌîº Î™©Î°ù Í≥ÑÏÇ∞
  let currentRecipes;
  if (showMyRecipes) {
    const indexOfLastRecipe = currentPageMyRecipes * recipesPerPage;
    const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;
    currentRecipes = recipes.slice(indexOfFirstRecipe, indexOfLastRecipe);
  } else {
    const indexOfLastRecipe = currentPageLikedRecipes * recipesPerPage;
    const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;
    currentRecipes = likedItems.slice(indexOfFirstRecipe, indexOfLastRecipe);
  }
  // Î≥¥Ïó¨Ï§Ñ Î†àÏãúÌîº Î™©Î°ùÏóê Îî∞Îùº Ï¥ù Î†àÏãúÌîº ÏàòÎ•º Í≤∞Ï†ï
  const handlePageChangeMyRecipes = (pageNumber) => {
    setCurrentPageMyRecipes(pageNumber);
  };
  const handlePageChangeLikedRecipes = (pageNumber) => {
    setCurrentPageLikedRecipes(pageNumber);
  };

  return (
    <section
      className="Board flex flex-col items-center justify-center w-full"
      style={{ marginBottom: '100px' }}
    >
      <header className="flex justify-end w-full mt-2 space-x-2 mr-12">
        <button
          className="font-score text-gray-300"
          onClick={(e) => {
            e.preventDefault();
            navigate('/delete-user');
          }}
        >
          ÌöåÏõê ÌÉàÌá¥
        </button>
        <button
          className="font-score outline-none font-semibold underline underline-offset-2 hover:text-red-500"
          onClick={() => {
            logout();
          }}
        >
          Î°úÍ∑∏ÏïÑÏõÉ
        </button>
      </header>
      <main className="flex flex-col items-center overflow-hidden">
        <div className="bg-gray-300 rounded-full h-32 w-32 mt-20">
          <img
            src={imageUrl}
            alt="ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ"
            className="rounded-full h-32 w-32 object-cover"
          />
        </div>
        <h1 className="font-score mt-5 text-xl font-semibold text-center">
          {nickName}
        </h1>
        <button
          onClick={() => navigate('/mypage/edit/profile')}
          className="font-score my-2 bg-white py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-opacity-50 underline hover:text-red-500"
        >
          ÎÇ¥ ÌîÑÎ°úÌïÑ ÏàòÏ†ï
        </button>

        <div className="flex">
          <button
            onClick={() => toggleRecipeView(true)} // ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú Î†àÏãúÌîº on
            className={`font-score mx-1 py-2 px-4 rounded ${
              showMyRecipes === true
                ? 'bg-main text-white'
                : 'bg-gray-100 text-black'
            }`}
          >
            ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú Î†àÏãúÌîº
          </button>
          <button
            onClick={() => toggleRecipeView(false)} // Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîº on
            className={`font-score mx-1 py-2 px-4 rounded ${
              showMyRecipes === false
                ? 'bg-main text-white'
                : 'bg-gray-100 text-black'
            }`}
          >
            Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîº
          </button>
        </div>
        {/* true : ÎÇ¥Í∞Ä Ï†ÄÏû•Ìïú Î†àÏãúÌîº */}
        {showMyRecipes ? (
          // ÎÇ¥Í∞Ä Ï†ÄÏû•Ìïú Î†àÏãúÌîº
          <div className="recipe-card-container w-full flex flex-wrap">
            {currentRecipes.map((recipe) => (
              <SavedRecipe
                key={recipe.postId}
                postId={recipe.postId}
                title={recipe.title}
                description={recipe.description}
                imageUrl={recipe.imageUrl}
                showEditDeleteButtons={showMyRecipes}
                onDelete={handleDeleteConfirmation}
                onEdit={handleEdit}
              />
            ))}
          </div>
        ) : (
          // Ï¢ãÏïÑÏöî ÎàÑÎ•∏ Î†àÏãúÌîº -> likeItemsÏóê Îì§Ïñ¥ÏûàÎäî postIdÎßå ÏÇ¨Ïö©ÌïòÎèÑÎ°ù Î≥ÄÍ≤ΩÌï¥Ïïº Ìï®
          <div className="recipe-card-container w-full flex flex-wrap">
            {likedItems.map((recipe) => (
              <LikedRecipe
                key={recipe.postId}
                postId={recipe.postId}
                title={recipe.title}
                description={recipe.description}
                imageUrl={recipe.imageUrl}
              />
            ))}
          </div>
        )}
        {showMyRecipes ? (
          <Pagination
            currentPage={currentPageMyRecipes}
            recipesPerPage={recipesPerPage}
            totalItems={totalMyRecipes}
            paginate={handlePageChangeMyRecipes}
          />
        ) : (
          <Pagination
            currentPage={currentPageLikedRecipes}
            recipesPerPage={recipesPerPage}
            totalItems={totalLikedRecipes}
            paginate={handlePageChangeLikedRecipes}
          />
        )}
      </main>
      <footer
        style={{
          position: 'fixed',
          bottom: '0',
          width: '100%',
          maxWidth: '31rem',
        }}
      >
        <Navigation />
      </footer>
    </section>
  );
}
